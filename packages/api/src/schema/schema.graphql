scalar DateTime

enum OrderingOptions {
  DESC
  ASC
}

input Filters {
  key: String
  value: String
}

type Query {
  runs(
    orderDirection: OrderingOptions = DESC
    cursor: String = null
    filters: [Filters] = null
  ): [Run]!
  runFeed(cursor: String): RunFeed!
  run(id: ID!): Run
  instance(id: ID!): Instance
}

type RunFeed {
  cursor: String!
  hasMore: Boolean!
  runs: [Run!]!
}

type Run {
  runId: ID!
  createdAt: DateTime!
  meta: RunMeta
  specs: [FullRunSpec]!
}

type FullRunSpec {
  spec: String!
  instanceId: String!
  claimed: Boolean!
  claimedAt: String
  results: InstanceResults
}

type InstanceResults {
  stats: InstanceStats!
  tests: [InstanceTest]
  error: String
  stdout: String
  screenshots: [InstanceScreeshot!]!
  cypressConfig: CypressConfig
  reporterStats: ReporterStats
  videoUrl: String
}

type Instance {
  runId: ID!
  run: PartialRun!
  spec: String!
  instanceId: ID!
  results: InstanceResults
}

type CypressConfig {
  video: Boolean!
  videoUploadOnPasses: Boolean!
}

type InstanceStats {
  suites: Int
  tests: Int
  passes: Int
  pending: Int
  skipped: Int
  failures: Int
  wallClockStartedAt: String
  wallClockEndedAt: String
  wallClockDuration: Int
}

type InstanceTest {
  testId: String!
  title: [String]
  state: String # prob enum
  body: String
  stack: String # cypress update to 5.0
  error: String # cypress update to 5.0
  # timings: InstanceTestTimings
  wallClockStartedAt: String # cypress update to 5.0
  wallClockDuration: Int # cypress update to 5.0
  attempts: [TestAttempt]
  duration: Int # cypress update to 5.0
}

type TestAttempt {
  state: String # prob enum
  error: TestAttemptError
  wallClockStartedAt: String
  wallClockDuration: Int
}

type TestAttemptError {
  name: String
  message: String
  stack: String
} 

type InstanceScreeshot {
  screenshotId: String!
  name: String
  testId: String!
  takenAt: String!
  height: Int!
  width: Int!
  screenshotURL: String
  testAttemptIndex: Int
}

type ReporterStats {
  suites: Int
  tests: Int
  passes: Int
  pending: Int
  failures: Int
  start: String
  end: String
  duration: Int
}

# Runs and subtypes
type PartialRun {
  runId: ID!
  createdAt: DateTime!
  meta: RunMeta
  specs: [RunSpec]!
}

type RunSpec {
  spec: String!
  instanceId: String!
  claimed: Boolean!
  claimedAt: String
}

type RunMeta {
  groupId: String
  ciBuildId: String
  projectId: String
  commit: Commit
}

type Commit {
  sha: String
  branch: String
  authorName: String
  authorEmail: String
  message: String
  remoteOrigin: String
}

type Mutation {
  deleteRun(runId: ID!): DeleteRunResponse!
  deleteRuns(runIds: [ID]!): DeleteRunResponse!
  deleteRunsInDateRange(
    startDate: DateTime!
    endDate: DateTime!
  ): DeleteRunResponse!
}

type DeleteRunResponse {
  success: Boolean!
  message: String!
  runIds: [ID]!
}
